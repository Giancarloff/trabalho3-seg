import time

class BBS:

    # Nos diz qual o tamanho da palavra para qual iremos gerar bits pseudo-aleatórios
    def __init__(self, word_size: int):
        self.word_size = word_size
        self.__set_intial_state()

    # Utilizando parâmetros computados exteriormente
    # P e Q têm 2048 bits
    # M, seed e state têm 4096 bits
    def __set_intial_state(self):
        self.P = 22429748224470371193339172428973278462660790616462392705317991901791567660428940370996028538041683712190380064605699491779885956932569980029974572401942694263447650949630635373072415323472423906444900443279569894790407365107829032476944782164365538952087017835965222469199208995262836111507505652621119052565359645471023607883212266218860745859164796735534286308244219799435886480671937006517311593938815741406282261332478339838858617920327447425572398188984376930258846748162501795782047688450995923503291329542221861036033926200103287034379146722284242381106853825279504528198098528959197442388278873131860344402367
        self.Q = 28856457946375892834066061928295035321874654281560395718035822879049074582052463137379136040683700966943608219929650689647709090883292476551664858695923220936232876191875557975111873425225795558170003707897109582690043401260998411237500975530792894926872933373988585125474437701315165227901449800007196748810614808164574924551209737923760832667864699039791653727274063019826129656203776372233429537183200765391958111121548763929379992916145520525405441185315450148650279273383277110393143514220631324795930128497862085891777318979041263520544330541359035583358301722574939139535149554911861446852574318639222390782259
        self.M = 647243086387228616091086052906886962849941782866112265775757171311784034431816599427023428948960901338352261357365369010311541502478379497758766093745805055192382146153870862458561435429119517721226422096700803658001763079599680337756375641441458807916816391489781941726653761479002122400359064146238740404733029487513745982231077669012794841616767282937227702326622655356001944947135874417176499595827075901990236514707692960199495519589627697988154139622856373214975806285409884169967745824181263802940474962705623008689328255502529338884767950992715731453035075101091231306284492056638911230116763656702028169722447293679541148071001835403436678489636424876487311220231403648642375205820557507461183715261050958111538849495364132238273848866974636060578222814900593363372938625332707155034845209325176198828405288676629137795600252358348706138886391851640036691413293195488448770182776633684031873914326542994117731310859151268889539759245638155909246055790008595810412816810139818014420891111056618719161066764572376463071924244060859936936302515605786570814609850040383501540987400179264970779863413879867697183797470494171896375102861537001262621652721832680211341878256718851542876524729135738496997842360123066096548981207053
        self.seed = 342660766310147385119597872388451790433447179950009352372153100725005211093639706686516952301296553348573532227329965991365858742038095865170612437520161393386568051532833239029069425959163504337949323314792782502512578371349913653855810507406131972329250254454071606707568952406645729263681174746093264232302439189960745814897037920877900302852660842234233407712091354580869749751162321105218067881096793591651882677038294174944326071383902642573003515586350763345699947903230287717200681915784715138187946163120394124241996537472291506022696642449066995850694063683874176966034279033908759858065154671259119173267754961299687753189094983552302494838095316617141249404386566828168993820643270989083593275174925856606500042763662114318594215913161681663830203547926698167696950423173007664978397769319915698309099913320526354798011553576511853039816627715014527039391913869899357092463726843212075661810759734554902743889301582081299814072489936360738131771408534634347799977004732201986504031020714186120716815031979065253864061847932392068750981211364789346537902259713310332649592227480849379292726393104662023885379779982544362270594040207563871194323967291057914700071847468550905518338000526522231497327723846381173093757144317
        self.state = 116388542860133962927705306084592636438688132352620583742155492253536590262807085130652226909124626938403067107498892629794993575980448600571449478924894284661906546725645248538679222231381659245054833731606334901789012593867878888308033827974771355113781157322119853616004987790580706060111773106329213548477908087214542048239011197821303982176980145519662598131147019240183424688222006933656313803374595017930999015036891584462692205404739885606076211827944365251937664819217269298409102675616417327374217342419972504807825514566994580454456753467364135180531396050822928042360585214614179477962346065358162088191699514391314726413299631003917736939189070779797959366283967766068766841474354526178566264489049083214376184766542750077552960720574578292312897293712578883946989996396801474076587835073665226729101349003693353163253703413545961624403672909641211818498860806425368034308757906491399699176579599893136394889677499938793028652469855548296254277533861212113015077170882392539074172149018739875597976210382518937447954534000173040558247223963163133165000126267688854350229348528555354086343469357607147348361035290739938785093104972251660323937844795778635624708677080398490827990706001860712968646566028255657733418318005

    # Pega o próximo número gerado
    def get(self):

        new_num_str = "0b"

        for _ in range(self.word_size):
            self.state = (self.state**2) % self.M
            bit = self.state % 2
            new_num_str += str(bit)
        
        return int(new_num_str, 2)
    
numbers: dict[int, list] = {}
avg_time: dict[int, float] = {}

word_sizes = [40, 56, 80, 128, 168, 224, 256, 512, 1024, 2048, 4096]

num_amount = 100
for size in word_sizes:
    numbers[size] = list()
    avg_time[size] = 0
    bbs = BBS(size)
    for i in range(num_amount):
        start = time.time()
        numbers[size].append(bbs.get())
        end = time.time()

        dt = (end - start) * 1000 # Convertendo para milisegundos
        avg_time[size] = (avg_time[size] + dt) / (i + 1)

for k, v in numbers.items():
    print(f"Size: {k}, Average time: {avg_time[k]:.4f}ms for {num_amount} numbers.")
