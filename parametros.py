import sympy
import math
import random

def find_primes(word_size):

    def generate_valid_primes():
        # Gera o primeiro primo
        P = sympy.randprime(2**(word_size - 1), 2**word_size)
        while not P % 4 == 3: # Verifica a condição para uso no BBS
            P = sympy.randprime(2**(word_size - 1), 2**word_size)

        # Gera o segundo primo
        Q = sympy.randprime(2**(word_size - 1), 2**word_size)
        while not Q % 4 == 3: # Verifica a condição para uso no BBS
            Q = sympy.randprime(2**(word_size - 1), 2**word_size)

        return P, Q

    # Verifica se são escolhas com período grande
    # Se não, tenta gerar mais algumas vezes
    p, q = generate_valid_primes()
    print("P and Q generated.")
    xp = (p-3)//2
    xq = (q-3)//2

    i = 0
    max_attempts = 10
    while math.gcd(xp, xq) != 2 or i < max_attempts:
        
        p, q = generate_valid_primes()

        xp = (p-3)//2
        xq = (q-3)//2

        i += 1

    if i == max_attempts:
        print("Not optimal.")

    return p, q

def find_coprime(M):

    while True:
        candidate = random.randrange(2, M)  # Escolhe um número aleatório entre 2 e M
        if math.gcd(candidate, M) == 1: # Testa co-primalidade
            return candidate

# P, Q = find_primes(2048)
# print(f"Size P: {(len(hex(P)) - 2)*4}, Size Q: {(len(hex(Q)) - 2)*4}")
# print()
# print(f"P = {P}")
# print()
# print(f"Q = {Q}")

P = 22429748224470371193339172428973278462660790616462392705317991901791567660428940370996028538041683712190380064605699491779885956932569980029974572401942694263447650949630635373072415323472423906444900443279569894790407365107829032476944782164365538952087017835965222469199208995262836111507505652621119052565359645471023607883212266218860745859164796735534286308244219799435886480671937006517311593938815741406282261332478339838858617920327447425572398188984376930258846748162501795782047688450995923503291329542221861036033926200103287034379146722284242381106853825279504528198098528959197442388278873131860344402367
Q = 28856457946375892834066061928295035321874654281560395718035822879049074582052463137379136040683700966943608219929650689647709090883292476551664858695923220936232876191875557975111873425225795558170003707897109582690043401260998411237500975530792894926872933373988585125474437701315165227901449800007196748810614808164574924551209737923760832667864699039791653727274063019826129656203776372233429537183200765391958111121548763929379992916145520525405441185315450148650279273383277110393143514220631324795930128497862085891777318979041263520544330541359035583358301722574939139535149554911861446852574318639222390782259
# print(f"M = {P * Q}")

M = 647243086387228616091086052906886962849941782866112265775757171311784034431816599427023428948960901338352261357365369010311541502478379497758766093745805055192382146153870862458561435429119517721226422096700803658001763079599680337756375641441458807916816391489781941726653761479002122400359064146238740404733029487513745982231077669012794841616767282937227702326622655356001944947135874417176499595827075901990236514707692960199495519589627697988154139622856373214975806285409884169967745824181263802940474962705623008689328255502529338884767950992715731453035075101091231306284492056638911230116763656702028169722447293679541148071001835403436678489636424876487311220231403648642375205820557507461183715261050958111538849495364132238273848866974636060578222814900593363372938625332707155034845209325176198828405288676629137795600252358348706138886391851640036691413293195488448770182776633684031873914326542994117731310859151268889539759245638155909246055790008595810412816810139818014420891111056618719161066764572376463071924244060859936936302515605786570814609850040383501540987400179264970779863413879867697183797470494171896375102861537001262621652721832680211341878256718851542876524729135738496997842360123066096548981207053
S = find_coprime(M)
print(f"S = {S}")
print(f"Initial State = {(S**2) % M}")

